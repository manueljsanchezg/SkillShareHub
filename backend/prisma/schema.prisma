datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  name      String
  surname   String
  birthDate DateTime
  email     String    @unique
  password  String
  role      Role
  skills    Skill[]
  wallet    Wallet?
  sessions  Session[]
  tokenReservations TokenReservation[]
}

model Skill {
  id          Int       @id @default(autoincrement())
  name        String
  type        String
  description String?
  tokens      Float
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  tags        Tag[]
  session     Session[]
}

model Tag {
  id     Int     @id @default(autoincrement())
  name   String @unique
  skills Skill[]
}

model Wallet {
  id                   Int           @id @default(autoincrement())
  tokens               Float
  user                 User          @relation(fields: [userId], references: [id])
  userId               Int           @unique
  sentTransactions     Transaction[] @relation("SentTransactions")
  receivedTransactions Transaction[] @relation("ReceivedTransactions")
}

model Session {
  id           Int           @id @default(autoincrement())
  title        String        @unique
  date         DateTime
  status       SessionStatus @default(PENDING)
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  skill        Skill         @relation(fields: [skillId], references: [id])
  skillId      Int
  transactions Transaction[]
  tokenReservation  TokenReservation?
}

model TokenReservation {
  id         Int       @id @default(autoincrement())
  tokens     Float
  status     ReservationTokenStatus @default(PENDING)
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  session    Session   @relation(fields: [sessionId], references: [id])
  sessionId  Int       @unique
}

model Transaction {
  id               Int      @id @default(autoincrement())
  createdAt        DateTime @default(now())
  tokens           Float
  senderWallet     Wallet   @relation("SentTransactions", fields: [senderWalletId], references: [id])
  senderWalletId   Int
  receiverWallet   Wallet   @relation("ReceivedTransactions", fields: [receiverWalletId], references: [id])
  receiverWalletId Int
  session          Session? @relation(fields: [sessionId], references: [id])
  sessionId        Int?
}

enum Role {
  ADMIN
  USER
}

enum SessionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ReservationTokenStatus {
  PENDING
  RETURNED
  COMPLETED
}
